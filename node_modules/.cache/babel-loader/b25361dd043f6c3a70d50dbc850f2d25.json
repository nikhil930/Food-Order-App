{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nikhil\\\\Desktop\\\\Projects\\\\FoodOrderApp\\\\src\\\\components\\\\Meals\\\\AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport classes from './AvailableMeals.module.css';\nimport Card from '../UI/Card';\nimport MealItems from './MealItems/MealItems';\nimport { useState, useEffect } from 'react'; // const DUMMY_MEALS = [\n//     {\n//       id: 'm1',\n//       name: 'Sushi',\n//       description: 'Finest fish and veggies',\n//       price: 22.99,\n//     },\n//     {\n//       id: 'm2',\n//       name: 'Schnitzel',\n//       description: 'A german specialty!',\n//       price: 16.5,\n//     },\n//     {\n//       id: 'm3',\n//       name: 'Barbecue Burger',\n//       description: 'American, raw, meaty',\n//       price: 12.99,\n//     },\n//     {\n//       id: 'm4',\n//       name: 'Green Bowl',\n//       description: 'Healthy...and green...',\n//       price: 18.99,\n//     },\n//   ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = () => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState();\n  useEffect(() => {\n    const fetchMeals = async () => {\n      const response = await fetch('https://react-http-8d93b-default-rtdb.firebaseio.com//mealsa.json');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong');\n      }\n\n      const data = await response.json();\n      const loadedMeals = [];\n\n      for (const key in data) {\n        loadedMeals.push({\n          id: key,\n          name: data[key].name,\n          description: data[key].description,\n          price: data[key].price\n        });\n      }\n\n      setMeals(loadedMeals);\n      setIsLoading(false);\n    };\n\n    try {\n      fetchMeals();\n    } catch (err) {\n      setIsLoading(false);\n      setHttpError(error.message);\n    }\n  });\n  if (isLoading) return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 12\n  }, this);\n\n  if (httpError) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsError,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: httpError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this);\n  }\n\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItems, {\n    id: meal.id,\n    name: meal.name,\n    description: meal.description,\n    price: meal.price\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 7\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AvailableMeals, \"HHOq8L83gOKcGxXpwNwkZx8Bz8I=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["C:/Users/Nikhil/Desktop/Projects/FoodOrderApp/src/components/Meals/AvailableMeals.js"],"names":["classes","Card","MealItems","useState","useEffect","AvailableMeals","meals","setMeals","isLoading","setIsLoading","httpError","setHttpError","fetchMeals","response","fetch","ok","Error","data","json","loadedMeals","key","push","id","name","description","price","err","error","message","textAlign","MealsError","mealsList","map","meal"],"mappings":"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","sourcesContent":["import classes from './AvailableMeals.module.css'\r\nimport Card from '../UI/Card'\r\nimport MealItems from './MealItems/MealItems';\r\nimport {useState , useEffect} from 'react';\r\n\r\n// const DUMMY_MEALS = [\r\n//     {\r\n//       id: 'm1',\r\n//       name: 'Sushi',\r\n//       description: 'Finest fish and veggies',\r\n//       price: 22.99,\r\n//     },\r\n//     {\r\n//       id: 'm2',\r\n//       name: 'Schnitzel',\r\n//       description: 'A german specialty!',\r\n//       price: 16.5,\r\n//     },\r\n//     {\r\n//       id: 'm3',\r\n//       name: 'Barbecue Burger',\r\n//       description: 'American, raw, meaty',\r\n//       price: 12.99,\r\n//     },\r\n//     {\r\n//       id: 'm4',\r\n//       name: 'Green Bowl',\r\n//       description: 'Healthy...and green...',\r\n//       price: 18.99,\r\n//     },\r\n//   ];\r\n\r\n\r\n  const AvailableMeals = () =>{\r\n    const [meals , setMeals]= useState([]);\r\n    const[isLoading,setIsLoading]=useState(true);\r\n    const [httpError ,setHttpError] = useState();\r\n\r\n    useEffect(()=>{\r\n     const fetchMeals = async() =>{\r\n       const response=await fetch ('https://react-http-8d93b-default-rtdb.firebaseio.com//mealsa.json');\r\n       if(!response.ok)\r\n       {\r\n         throw new Error ('Something went wrong');\r\n       }\r\n    \r\n       const data=await response.json();\r\n       \r\n       const loadedMeals=[];\r\n       for(const key in data)\r\n       {\r\n         loadedMeals.push({\r\n           id:key,\r\n           name:data[key].name,\r\n           description:data[key].description,\r\n           price:data[key].price\r\n         });\r\n       }\r\n       setMeals(loadedMeals);\r\n       setIsLoading(false);\r\n     }\r\n    try{\r\n     fetchMeals();\r\n    }\r\n    catch(err)\r\n    {\r\n      setIsLoading(false);\r\n      setHttpError(error.message);\r\n    }\r\n    })\r\n    if(isLoading)\r\n    return <Card>\r\n      <h3 style={{textAlign:'center'}}>Loading...</h3>\r\n    </Card>\r\n    if(httpError)\r\n    {\r\n      return(\r\n        <section className={classes.MealsError}>\r\n           <p>{httpError}</p> \r\n        </section>\r\n      )\r\n    }\r\n      const mealsList=meals.map(meal=>\r\n      <MealItems \r\n        id={meal.id}\r\n        key={meal.id}\r\n        name={meal.name}\r\n        description={meal.description}\r\n        price={meal.price}\r\n      />)\r\n    return <section className={classes.meals}>\r\n        <Card>       \r\n        <ul>\r\n            {mealsList}\r\n        </ul>\r\n        </Card>\r\n    </section>\r\n  };\r\n\r\n  export default AvailableMeals;"]},"metadata":{},"sourceType":"module"}